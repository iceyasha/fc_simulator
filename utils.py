from typing import List
import time
import pygame


def log(*args, **kwargs):
    # time.time() 返回 unix time
    # 1500057448 -> 7:38:38
    format = '%H:%M:%S'
    value = time.localtime(int(time.time()))

    dt = time.strftime(format, value)
    print(dt, '[info]', *args, **kwargs)
    # 将记录持久化.参数a，append 追加模式.
    # with open('log.txt', 'a', encoding='utf-8') as f:
    #     print(dt, *args, file=f, **kwargs)

def palette_table():
    # r g b a
    palette = [
        (0x7F, 0x7F, 0x7F, 0xFF), (0x20, 0x00, 0xB0, 0xFF), (0x28, 0x00, 0xB8, 0xFF), (0x60, 0x10, 0xA0, 0xFF),
        (0x98, 0x20, 0x78, 0xFF), (0xB0, 0x10, 0x30, 0xFF), (0xA0, 0x30, 0x00, 0xFF), (0x78, 0x40, 0x00, 0xFF),
        (0x48, 0x58, 0x00, 0xFF), (0x38, 0x68, 0x00, 0xFF), (0x38, 0x6C, 0x00, 0xFF), (0x30, 0x60, 0x40, 0xFF),
        (0x30, 0x50, 0x80, 0xFF), (0x00, 0x00, 0x00, 0xFF), (0x00, 0x00, 0x00, 0xFF), (0x00, 0x00, 0x00, 0xFF),

        (0xBC, 0xBC, 0xBC, 0xFF), (0x40, 0x60, 0xF8, 0xFF), (0x40, 0x40, 0xFF, 0xFF), (0x90, 0x40, 0xF0, 0xFF),
        (0xD8, 0x40, 0xC0, 0xFF), (0xD8, 0x40, 0x60, 0xFF), (0xE0, 0x50, 0x00, 0xFF), (0xC0, 0x70, 0x00, 0xFF),
        (0x88, 0x88, 0x00, 0xFF), (0x50, 0xA0, 0x00, 0xFF), (0x48, 0xA8, 0x10, 0xFF), (0x48, 0xA0, 0x68, 0xFF),
        (0x40, 0x90, 0xC0, 0xFF), (0x00, 0x00, 0x00, 0xFF), (0x00, 0x00, 0x00, 0xFF), (0x00, 0x00, 0x00, 0xFF),

        (0xFF, 0xFF, 0xFF, 0xFF), (0x60, 0xA0, 0xFF, 0xFF), (0x50, 0x80, 0xFF, 0xFF), (0xA0, 0x70, 0xFF, 0xFF),
        (0xF0, 0x60, 0xFF, 0xFF), (0xFF, 0x60, 0xB0, 0xFF), (0xFF, 0x78, 0x30, 0xFF), (0xFF, 0xA0, 0x00, 0xFF),
        (0xE8, 0xD0, 0x20, 0xFF), (0x98, 0xE8, 0x00, 0xFF), (0x70, 0xF0, 0x40, 0xFF), (0x70, 0xE0, 0x90, 0xFF),
        (0x60, 0xD0, 0xE0, 0xFF), (0x60, 0x60, 0x60, 0xFF), (0x00, 0x00, 0x00, 0xFF), (0x00, 0x00, 0x00, 0xFF),

        (0xFF, 0xFF, 0xFF, 0xFF), (0x90, 0xD0, 0xFF, 0xFF), (0xA0, 0xB8, 0xFF, 0xFF), (0xC0, 0xB0, 0xFF, 0xFF),
        (0xE0, 0xB0, 0xFF, 0xFF), (0xFF, 0xB8, 0xE8, 0xFF), (0xFF, 0xC8, 0xB8, 0xFF), (0xFF, 0xD8, 0xA0, 0xFF),
        (0xFF, 0xF0, 0x90, 0xFF), (0xC8, 0xF0, 0x80, 0xFF), (0xA0, 0xF0, 0xA0, 0xFF), (0xA0, 0xFF, 0xC8, 0xFF),
        (0xA0, 0xFF, 0xF0, 0xFF), (0xA0, 0xA0, 0xA0, 0xFF), (0x00, 0x00, 0x00, 0xFF), (0x00, 0x00, 0x00, 0xFF),
    ]
    return palette

def draw(pixels:List[int], scale=1):
    log('=' * 20)
    width = 256
    height = 240
    fps = 1
    screen = pygame.display.set_mode((width * scale, height * scale))
    clock = pygame.time.Clock()
    running = True
    color_table = palette_table()
    while running:
        for index, color_code in enumerate(pixels):
            x = index % width * scale
            y = index // width * scale
            rect_list = [x, y, scale, scale]
            color = color_table[color_code]
            pygame.draw.rect(screen, color, rect_list, 0)
        pygame.display.flip()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            clock.tick(fps)

def bytes_to_int(byte_list: List[int], mode='little', signed=False):
    # 默认小端序.大端序改mode为big
    # 默认无符号，需要正负修改signed为True
    value = int.from_bytes(byte_list, byteorder=mode, signed=signed)
    return value


def ff(value):
    s = hex(value)
    s = s.split('x')[1]
    return s

def sign(value: int, mode='little', length=1):
    # 把 8 位无符号数转换成 8 位有符号数
    bs = int.to_bytes(value, length=length, byteorder=mode, signed=False)
    signed_value = int.from_bytes(bs, byteorder=mode, signed=True)
    return signed_value

class FlagByte:
    def __init__(self, flag):
        self.flag = flag

    def __getitem__(self, index):
        flag = self.flag
        if isinstance(index, int):
            mask = 1
            r = flag >> index
            r &= mask
        elif isinstance(index, slice):
            start = index.start
            stop = index.stop
            length = stop - start
            mask = 0
            for i in range(length):
                mask <<= 1
                mask |= 1
            mask <<= start
            r = flag & mask
            r >>= start
        else:
            raise IndexError("index must be in [0, 7]")
        return r

    def __setitem__(self, index, value):
        if value == 1:
            mask = 1 << index
            self.flag |= mask
        elif value == 0:
            mask = 1 << index
            mask = ~mask
            self.flag &= mask
        else:
            raise ValueError("value must be 0 or 1")